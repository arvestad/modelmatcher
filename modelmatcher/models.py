# Define the R matrices and default frequencies

import numpy as np

class RateMatrix:
    '''
    A class for representing matrices. The goal is to abstract away the representation
    (Q or R?) and implement the most basic computations on them.
    '''
    def __init__(self, name):
        self.R = None
        self.Q = None
        self.freq = None
        self.name = name

        # We also store the eigenvectors of Q
        self.right_eigenvectors = None
        self.left_eigenvectors = None
        self.q_eigenvals = None

    @classmethod
    def instantiate(c, modelname):
        '''
        Return an instance of a class, given its name.
        With so many subclasses, I want to simplify access to them.
        '''
        classes = { cls.__name__ : cls() for cls in RateMatrix.__subclasses__()}
        if modelname in classes:
            return classes[modelname]
        else:
            raise Exception(f'This is not a model: {modelname}')

    @staticmethod
    def combine_models(m1, m2):
        new_model = RateMatrix(f'avg({m1.name},{m2.name})')
#        new_model.Q = 0.5 * (m1.Q + m2.Q)
        new_model.Q = m1.Q
        new_model.freq = 0.5 * (m1.freq + m2.freq) # The $\pi$ vector

        # Now need new R matrix. Use that $r_{ij} = q_{ij} / \pi_j$
        D_freq = np.diag(np.reciprocal(new_model.freq)) # Construct the diagonal matrix with inverses of $\pi_j$
        new_model.R = np.matmul(new_model.Q, D_freq)

        new_model._init_decomposition()

        return new_model

    @staticmethod
    def get_all_models():
        '''
        There are so many models to keep track of. This method
        makes it easier to e.g. loop over model instances.
        '''
        modelclasses = RateMatrix.__subclasses__()
        models = map(lambda cls: cls(), modelclasses)
        return models

    def get_name(self):
        if self.name:
            return self.name
        else:
            return type(self).__name__

    def get_q(self):
        return self.Q

    def get_r(self):
        return self.R

    def get_freq(self):
        return self.freq

    def get_eigenvectors(self):
        return self.left_eigenvectors, self.right_eigenvectors

    def set_r_and_freq(self, r_elems, freq, order='phyml'):
        '''
        Initialise the R matrix using the a triangular representation (lower, by default),
        and compute Q and its eigen decomposition.
        '''
        # Initialize an R matrix
        R = np.zeros((20, 20))
        if order == 'phyml' or order == 'paml':
            xs, ys = np.tril_indices(20, k=-1) # Get the indices of the lower-triangular elements
        else:
            raise Exception(f'Input order {order} is not implemented yet')
        R[xs, ys] = r_elems                  # Lower elements
        R[ys, xs] = r_elems                  # Upper elements
        self.R = R

        # Set Q
        self.update_freq(freq)


    def update_freq(self, freq):
        '''
        Combine the R matrix with given frequences, and compute the
        implied Q matrix.
        '''
        self.freq = np.array(freq)
        D_freq = np.diag(self.freq)

        Q = np.matmul(self.R, D_freq)                    # $q_{ij} = r_{ij} * \pi_j$
        Q[ np.diag_indices(20) ] = 0 - np.sum(Q, axis=1) # Set diagonal so row sum is zero

        # Find a scale factor so that the expected rate is 1:  $\sum_i \pi_i*q_{i,i} = 1$
        scale = 0 - np.sum(D_freq * Q.diagonal(0))

        self.Q = Q / scale
        self._init_decomposition()


    def _init_decomposition(self):
        '''
        Compute the eigen-decomposition of Q and assign it to the object.

        Exceptions: raises LinAlgError if eigen computation does not converge.
        '''
        assert isinstance(self.Q, np.ndarray)
        evals, evecs = np.linalg.eig(self.Q)
        self.q_eigenvals = evals
        self.right_eigenvectors = evecs
        self.left_eigenvectors = np.linalg.inv(evecs)


    def get_replacement_probs(self, t):
        '''
        Compute and return P(t) = e^(Qt), t >= 0
        '''
        assert t >= 0
        assert isinstance(self.q_eigenvals, np.ndarray)
        assert isinstance(self.left_eigenvectors, np.ndarray)
        assert isinstance(self.right_eigenvectors, np.ndarray)

        exp_diag = np.diag(np.exp(np.dot(self.q_eigenvals, t)))
        P_t = np.matmul(self.right_eigenvectors, np.matmul(exp_diag, self.left_eigenvectors))
        return P_t

    def sample_count_matrix(self, n, t_vec):
        '''
        Get a count matrix simulating a pairwise aligment with n columns each taken
        at the time points in the t_vec list.
        '''
        P_matrices = map(self.get_replacement_probs, t_vec)
        raise Exception('Not done here!')


    def __str__(self):
        '''
        Convert Q to a nicely printable string.
        '''
        s = '[\n'
        for row in range(20):
            s += ' ['
            for col in range(20):
                val = self.Q.item((row, col))
                s+=f' {val:7.3}'
            s += ']\n'
        s += ']'
        return s

    def __repr__(self):
        '''
        Abusing this function by returning a simple string representation, rather than
        something that can be immediatley read.
        '''
        return self.__str__()

#
# The following matrices are copied from the seq-gen repository
#    https://github.com/rambaut/Seq-Gen/blob/master/source/aamodels.c
#

class WAG(RateMatrix):
    def __init__(self):
        super().__init__('WAG')
        freq = [0.0866279, 0.043972, 0.0390894, 0.0570451, 0.0193078, 0.0367281, 0.0580589, 0.0832518, 0.0244313, 0.048466, 0.086209, 0.0620286, 0.0195027, 0.0384319, 0.0457631, 0.0695179, 0.0610127, 0.0143859, 0.0352742, 0.0708956]
        R_lower_elements = [0.551571,
                            0.509848, 0.635346,
                            0.738998, 0.147304, 5.429420,
                            1.027040, 0.528191, 0.265256, 0.0302949,
                            0.908598, 3.035500, 1.543640, 0.616783, 0.0988179,
                            1.582850, 0.439157, 0.947198, 6.174160, 0.021352, 5.469470,
                            1.416720, 0.584665, 1.125560, 0.865584, 0.306674, 0.330052, 0.567717,
                            0.316954, 2.137150, 3.956290, 0.930676, 0.248972, 4.294110, 0.570025, 0.249410,
                            0.193335, 0.186979, 0.554236, 0.039437, 0.170135, 0.113917, 0.127395, 0.0304501,0.138190,
                            0.397915, 0.497671, 0.131528, 0.0848047,0.384287, 0.869489, 0.154263, 0.0613037,0.499462, 3.170970,
                            0.906265, 5.351420, 3.012010, 0.479855, 0.0740339,3.894900, 2.584430, 0.373558, 0.890432, 0.323832, 0.257555,
                            0.893496, 0.683162, 0.198221, 0.103754, 0.390482, 1.545260, 0.315124, 0.174100, 0.404141, 4.257460, 4.854020, 0.934276,
                            0.210494, 0.102711, 0.0961621,0.0467304,0.398020, 0.0999208,0.0811339,0.049931, 0.679371, 1.059470, 2.115170, 0.088836, 1.190630,
                            1.438550, 0.679489, 0.195081, 0.423984, 0.109404, 0.933372, 0.682355, 0.243570, 0.696198, 0.0999288,0.415844, 0.556896, 0.171329, 0.161444,
                            3.370790, 1.224190, 3.974230, 1.071760, 1.407660, 1.028870, 0.704939, 1.341820, 0.740169, 0.319440, 0.344739, 0.967130, 0.493905, 0.545931, 1.613280,
                            2.121110, 0.554413, 2.030060, 0.374866, 0.512984, 0.857928, 0.822765, 0.225833, 0.473307, 1.458160, 0.326622, 1.386980, 1.516120, 0.171903, 0.795384, 4.378020,
                            0.113133, 1.163920, 0.0719167, 0.129767, 0.717070, 0.215737, 0.156557, 0.336983,0.262569, 0.212483, 0.665309, 0.137505, 0.515706, 1.529640, 0.139405, 0.523742, 0.110864,
                            0.240735, 0.381533, 1.086000, 0.325711, 0.543833, 0.227710, 0.196303, 0.103604, 3.873440, 0.420170, 0.398618, 0.133264, 0.428437, 6.454280, 0.216046, 0.786993, 0.291148, 2.485390,
                            2.006010, 0.251849, 0.196246, 0.152335, 1.002140, 0.301281, 0.588731, 0.187247, 0.118358, 7.821300, 1.800340, 0.305434, 2.058450, 0.649892, 0.314887, 0.232739, 1.388230, 0.365369, 0.314730]
        self.set_r_and_freq(R_lower_elements, freq)

class JTT(RateMatrix):
    def __init__(self):
        super().__init__('JTT')
        R_lower_elems = [ 58.00,54.00,45.00,81.00,16.00,528.00,56.00,113.00,34.00,10.00,57.00,310.00,86.00,49.00,9.00,105.00,29.00,58.00,767.00,5.00,323.00,179.00,137.00,81.00,130.00,59.00,26.00,119.00,27.00,328.00,391.00,112.00,69.00,597.00,26.00,23.00,36.00,22.00,47.00,11.00,17.00,9.00,12.00,6.00,16.00,30.00,38.00,12.00,7.00,23.00,72.00,9.00,6.00,56.00,229.00,35.00,646.00,263.00,26.00,7.00,292.00,181.00,27.00,45.00,21.00,14.00,54.00,44.00,30.00,15.00,31.00,43.00,18.00,14.00,33.00,479.00,388.00,65.00,15.00,5.00,10.00,4.00,78.00,4.00,5.00,5.00,40.00,89.00,248.00,4.00,43.00,194.00,74.00,15.00,15.00,14.00,164.00,18.00,24.00,115.00,10.00,102.00,21.00,16.00,17.00,378.00,101.00,503.00,59.00,223.00,53.00,30.00,201.00,73.00,40.00,59.00,47.00,29.00,92.00,285.00,475.00,64.00,232.00,38.00,42.00,51.00,32.00,33.00,46.00,245.00,25.00,103.00,226.00,12.00,118.00,477.00,9.00,126.00,8.00,4.00,115.00,18.00,10.00,55.00,8.00,9.00,52.00,10.00,24.00,53.00,6.00,35.00,12.00,11.00,20.00,70.00,46.00,209.00,24.00,7.00,8.00,573.00,32.00,24.00,8.00,18.00,536.00,10.00,63.00,21.00,71.00,298.00,17.00,16.00,31.00,62.00,20.00,45.00,47.00,11.00,961.00,180.00,14.00,323.00,62.00,23.00,38.00,112.00,25.00,16.00 ]
        freq = [ 0.076748, 0.051691, 0.042645, 0.051544, 0.019803, 0.040752, 0.061830, 0.073152, 0.022944, 0.053761, 0.091904, 0.058676, 0.023826, 0.040126, 0.050901, 0.068765, 0.058565, 0.014261, 0.032102, 0.066005 ]
        self.set_r_and_freq(R_lower_elems, freq)

class JTT_DCMut(RateMatrix):
    def __init__(self):
        super().__init__('JTT-DCMUT')
        R_lower_elems = [ 0.531678,0.557967,0.451095,0.827445,0.154899,5.549530,0.574478,1.019843,0.313311,0.105625,0.556725,3.021995,0.768834,0.521646,0.091304,1.066681,0.318483,0.578115,7.766557,0.053907,3.417706,1.740159,1.359652,0.773313,1.272434,0.546389,0.231294,1.115632,0.219970,3.210671,4.025778,1.032342,0.724998,5.684080,0.243768,0.201696,0.361684,0.239195,0.491003,0.115968,0.150559,0.078270,0.111773,0.053769,0.181788,0.310007,0.372261,0.137289,0.061486,0.164593,0.709004,0.097485,0.069492,0.540571,2.335139,0.369437,6.529255,2.529517,0.282466,0.049009,2.966732,1.731684,0.269840,0.525096,0.202562,0.146481,0.469395,0.431045,0.330720,0.190001,0.409202,0.456901,0.175084,0.130379,0.329660,4.831666,3.856906,0.624581,0.138293,0.065314,0.073481,0.032522,0.678335,0.045683,0.043829,0.050212,0.453428,0.777090,2.500294,0.024521,0.436181,1.959599,0.710489,0.121804,0.127164,0.123653,1.608126,0.191994,0.208081,1.141961,0.098580,1.060504,0.216345,0.164215,0.148483,3.887095,1.001551,5.057964,0.589268,2.155331,0.548807,0.312449,1.874296,0.743458,0.405119,0.592511,0.474478,0.285564,0.943971,2.788406,4.582565,0.650282,2.351311,0.425159,0.469823,0.523825,0.331584,0.316862,0.477355,2.553806,0.272514,0.965641,2.114728,0.138904,1.176961,4.777647,0.084329,1.257961,0.027700,0.057466,1.104181,0.172206,0.114381,0.544180,0.128193,0.134510,0.530324,0.089134,0.201334,0.537922,0.069965,0.310927,0.080556,0.139492,0.235601,0.700693,0.453952,2.114852,0.254745,0.063452,0.052500,5.848400,0.303445,0.241094,0.087904,0.189870,5.484236,0.113850,0.628608,0.201094,0.747889,2.924161,0.171995,0.164525,0.315261,0.621323,0.179771,0.465271,0.470140,0.121827,9.533943,1.761439,0.124066,3.038533,0.593478,0.211561,0.408532,1.143980,0.239697,0.165473 ]
        freq = [ 0.076862, 0.051057, 0.042546, 0.051269, 0.020279, 0.041061, 0.061820, 0.074714, 0.022983, 0.052569, 0.091111, 0.059498, 0.023414, 0.040530, 0.050532, 0.068225, 0.058518, 0.014336, 0.032303, 0.066374 ]
        self.set_r_and_freq(R_lower_elems, freq)

class LG(RateMatrix):
    def __init__(self):
        super().__init__('LG')
        R_lower_elems = [ 0.425093,0.276818,0.751878,0.395144,0.123954,5.076149,2.489084,0.534551,0.528768,0.062556,0.969894,2.807908,1.695752,0.523386,0.084808,1.038545,0.363970,0.541712,5.243870,0.003499,4.128591,2.066040,0.390192,1.437645,0.844926,0.569265,0.267959,0.348847,0.358858,2.426601,4.509238,0.927114,0.640543,4.813505,0.423881,0.311484,0.149830,0.126991,0.191503,0.010690,0.320627,0.072854,0.044265,0.008705,0.108882,0.395337,0.301848,0.068427,0.015076,0.594007,0.582457,0.069673,0.044261,0.366317,4.145067,0.536518,6.326067,2.145078,0.282959,0.013266,3.234294,1.807177,0.296636,0.697264,0.159069,0.137500,1.124035,0.484133,0.371004,0.025548,0.893680,1.672569,0.173735,0.139538,0.442472,4.273607,6.312358,0.656604,0.253701,0.052722,0.089525,0.017416,1.105251,0.035855,0.018811,0.089586,0.682139,1.112727,2.592692,0.023918,1.798853,1.177651,0.332533,0.161787,0.394456,0.075382,0.624294,0.419409,0.196961,0.508851,0.078281,0.249060,0.390322,0.099849,0.094464,4.727182,0.858151,4.008358,1.240275,2.784478,1.223828,0.611973,1.739990,0.990012,0.064105,0.182287,0.748683,0.346960,0.361819,1.338132,2.139501,0.578987,2.000679,0.425860,1.143480,1.080136,0.604545,0.129836,0.584262,1.033739,0.302936,1.136863,2.020366,0.165001,0.571468,6.472279,0.180717,0.593607,0.045376,0.029890,0.670128,0.236199,0.077852,0.268491,0.597054,0.111660,0.619632,0.049906,0.696175,2.457121,0.095131,0.248862,0.140825,0.218959,0.314440,0.612025,0.135107,1.165532,0.257336,0.120037,0.054679,5.306834,0.232523,0.299648,0.131932,0.481306,7.803902,0.089613,0.400547,0.245841,3.151815,2.547870,0.170887,0.083688,0.037967,1.959291,0.210332,0.245034,0.076701,0.119013,10.649107,1.702745,0.185202,1.898718,0.654683,0.296501,0.098369,2.188158,0.189510,0.249313 ]
        freq = [ 0.079066, 0.055941, 0.041977, 0.053052, 0.012937, 0.040767, 0.071586, 0.057337, 0.022355, 0.062157, 0.099081, 0.064600, 0.022951, 0.042302, 0.044040, 0.061197, 0.053287, 0.012066, 0.034155, 0.069147 ]
        self.set_r_and_freq(R_lower_elems, freq)

class VT(RateMatrix):
    def __init__(self):
        super().__init__('VT')
        R_lower_elems = [ 0.233108,0.199097,0.210797,0.265145,0.105191,0.883422,0.227333,0.031726,0.027495,0.010313,0.310084,0.493763,0.2757,0.205842,0.004315,0.567957,0.25524,0.270417,1.599461,0.005321,0.960976,0.876213,0.156945,0.362028,0.311718,0.050876,0.12866,0.250447,0.078692,0.213164,0.290006,0.134252,0.016695,0.315521,0.104458,0.058131,0.222972,0.08151,0.087225,0.01172,0.046398,0.054602,0.046589,0.051089,0.020039,0.42463,0.192364,0.069245,0.060863,0.091709,0.24353,0.151924,0.087056,0.103552,2.08989,0.393245,1.755838,0.50306,0.261101,0.004067,0.738208,0.88863,0.193243,0.153323,0.093181,0.201204,0.21155,0.08793,0.05742,0.012182,0.02369,0.120801,0.058643,0.04656,0.021157,0.493845,1.105667,0.096474,0.116646,0.042569,0.039769,0.016577,0.051127,0.026235,0.028168,0.050143,0.079807,0.32102,0.946499,0.038261,0.173052,0.399143,0.12848,0.083956,0.160063,0.011137,0.15657,0.205134,0.124492,0.078892,0.054797,0.169784,0.212302,0.010363,0.042564,1.817198,0.292327,0.847049,0.461519,0.17527,0.358017,0.406035,0.612843,0.167406,0.081567,0.214977,0.400072,0.090515,0.138119,0.430431,0.877877,0.204109,0.471268,0.178197,0.079511,0.248992,0.321028,0.136266,0.101117,0.376588,0.243227,0.446646,0.184609,0.08587,0.207143,1.767766,0.030309,0.046417,0.010459,0.011393,0.007732,0.021248,0.018844,0.02399,0.020009,0.034954,0.083439,0.023321,0.022019,0.12805,0.014584,0.035933,0.020437,0.087061,0.09701,0.093268,0.051664,0.042823,0.062544,0.0552,0.037568,0.286027,0.086237,0.189842,0.068689,0.073223,0.898663,0.032043,0.121979,0.094617,0.124746,1.230985,0.113146,0.049824,0.048769,0.163831,0.112027,0.205868,0.082579,0.068575,3.65443,1.337571,0.144587,0.307309,0.247329,0.129315,0.1277,0.740372,0.022134,0.125733 ]
        freq = [ 0.078837, 0.051238, 0.042313, 0.053066, 0.015175, 0.036713, 0.061924, 0.070852, 0.023082, 0.062056, 0.096371, 0.057324, 0.023771, 0.043296, 0.043911, 0.063403, 0.055897, 0.013272, 0.034399, 0.073101 ]
        self.set_r_and_freq(R_lower_elems, freq)

class HIVb(RateMatrix):
    def __init__(self):
        super().__init__('HIVb')
        R_lower_elems = [ 0.307507,0.005,0.295543,1.45504,0.005,17.6612,0.123758,0.351721,0.0860642,0.005,0.0551128,3.4215,0.672052,0.005,0.005,1.48135,0.0749218,0.0792633,10.5872,0.005,2.5602,2.13536,3.65345,0.323401,2.83806,0.897871,0.0619137,3.92775,0.0847613,9.04044,7.64585,1.9169,0.240073,7.05545,0.11974,0.005,0.005,0.677289,0.680565,0.0176792,0.005,0.005,0.00609079,0.005,0.103111,0.215256,0.701427,0.005,0.00876048,0.129777,1.49456,0.005,0.005,1.74171,5.95879,0.005,20.45,7.90443,0.005,0.005,6.54737,4.61482,0.521705,0.005,0.322319,0.0814995,0.0186643,2.51394,0.005,0.005,0.005,0.303676,0.175789,0.005,0.005,11.2065,5.31961,1.28246,0.0141269,0.005,0.005,0.005,9.29815,0.005,0.005,0.291561,0.145558,3.39836,8.52484,0.0342658,0.188025,2.12217,1.28355,0.00739578,0.0342658,0.005,4.47211,0.0120226,0.005,2.45318,0.0410593,2.07757,0.0313862,0.005,0.005,2.46633,3.4791,13.1447,0.52823,4.69314,0.116311,0.005,4.38041,0.382747,1.21803,0.927656,0.504111,0.005,0.956472,5.37762,15.9183,2.86868,6.88667,0.274724,0.739969,0.243589,0.289774,0.369615,0.711594,8.61217,0.0437673,4.67142,4.94026,0.0141269,2.01417,8.93107,0.005,0.991338,0.005,0.005,2.63277,0.026656,0.005,1.21674,0.0695179,0.005,0.748843,0.005,0.089078,0.829343,0.0444506,0.0248728,0.005,0.005,0.00991826,1.76417,0.674653,7.57932,0.113033,0.0792633,0.005,18.6943,0.148168,0.111986,0.005,0.005,15.34,0.0304381,0.648024,0.105652,1.28022,7.61428,0.0812454,0.026656,1.04793,0.420027,0.0209153,1.02847,0.953155,0.005,17.7389,1.41036,0.265829,6.8532,0.723274,0.005,0.0749218,0.709226,0.005,0.0410593 ]
        freq = [ 0.060490222, 0.066039665, 0.044127815, 0.042109048, 0.020075899, 0.053606488, 0.071567447, 0.072308239, 0.022293943, 0.069730629, 0.098851122, 0.056968211, 0.019768318, 0.028809447, 0.046025282, 0.05060433, 0.053636813, 0.033011601, 0.028350243, 0.061625237 ]
        self.set_r_and_freq(R_lower_elems, freq)

class mtArt(RateMatrix):
    def __init__(self):
        super().__init__('mtArt')
        R_lower_elems = [ 0.2,0.2,0.2,1,4,500,254,36,98,11,0.2,154,262,0.2,0.2,0.2,0.2,183,862,0.2,262,200,0.2,121,12,81,3,44,0.2,41,180,0.2,12,314,15,0.2,26,2,21,7,63,11,7,3,0.2,4,2,13,1,79,16,2,1,6,515,0.2,209,467,2,0.2,349,106,0.2,0.2,3,4,121,5,79,0.2,312,67,0.2,56,0.2,515,885,106,13,5,20,0.2,184,0.2,0.2,1,14,118,263,11,322,49,0.2,17,0.2,0.2,39,8,0.2,1,0.2,12,17,5,15,673,3,398,44,664,52,31,226,11,7,8,144,112,36,87,244,0.2,166,0.2,183,44,43,0.2,19,204,48,70,289,14,47,660,0.2,0.2,8,0.2,22,7,11,2,0.2,0.2,21,16,71,54,0.2,2,0.2,1,4,251,0.2,72,87,8,9,191,12,20,117,71,792,18,30,46,38,340,0.2,23,0.2,350,0.2,14,3,0.2,1855,85,26,281,52,32,61,544,0.2,2 ]
        freq = [ 0.054116, 0.018227, 0.039903, 0.020160, 0.009709, 0.018781, 0.024289, 0.068183, 0.024518, 0.092638, 0.148658, 0.021718, 0.061453, 0.088668, 0.041826, 0.091030, 0.049194, 0.029786, 0.039443, 0.057700 ]
        self.set_r_and_freq(R_lower_elems, freq)

class HIVw(RateMatrix):
    def __init__(self):
        super().__init__('HIVw')
        R_lower_elems = [ 0.0744808,0.617509,0.16024,4.43521,0.0674539,29.4087,0.167653,2.86364,0.0604932,0.005,0.005,10.6746,0.342068,0.005,0.005,5.56325,0.0251632,0.201526,12.1233,0.005,3.20656,1.8685,13.4379,0.0604932,10.3969,0.0489798,0.0604932,14.7801,0.005,6.84405,8.59876,2.31779,0.005,18.5465,0.005,0.005,0.005,1.34069,0.987028,0.145124,0.005,0.0342252,0.0390512,0.005,0.005,0.16024,0.586757,0.005,0.005,0.005,2.89048,0.129839,0.0489798,1.76382,9.10246,0.592784,39.8897,10.6655,0.894313,0.005,13.0705,23.9626,0.279425,0.22406,0.817481,0.005,0.005,3.28652,0.201526,0.005,0.005,0.005,0.005,0.0489798,0.005,17.3064,11.3839,4.09564,0.597923,0.005,0.005,0.005,0.362959,0.005,0.005,0.005,0.005,1.48288,7.48781,0.005,0.005,1.00981,0.404723,0.344848,0.005,0.005,3.04502,0.005,0.005,13.9444,0.005,9.83095,0.111928,0.005,0.0342252,8.5942,8.35024,14.5699,0.427881,1.12195,0.16024,0.005,6.27966,0.725157,0.740091,6.14396,0.005,0.392575,4.27939,14.249,24.1422,0.928203,4.54206,0.630395,0.005,0.203091,0.458743,0.0489798,0.95956,9.36345,0.005,4.04802,7.41313,0.114512,4.33701,6.34079,0.005,5.96564,0.005,0.005,5.49894,0.0443298,0.005,2.8258,0.005,0.005,1.37031,0.005,0.005,0.005,0.005,1.10156,0.005,0.005,0.005,5.06475,2.28154,8.34835,0.005,0.005,0.005,47.4889,0.114512,0.005,0.005,0.579198,4.12728,0.005,0.933142,0.490608,0.005,24.8094,0.279425,0.0744808,2.91786,0.005,0.005,2.19952,2.79622,0.827479,24.8231,2.95344,0.128065,14.7683,2.28,0.005,0.862637,0.005,0.005,1.35482 ]
        freq = [ 0.0377494, 0.057321, 0.0891129, 0.0342034, 0.0240105, 0.0437824, 0.0618606, 0.0838496, 0.0156076, 0.0983641, 0.0577867, 0.0641682, 0.0158419, 0.0422741, 0.0458601, 0.0550846, 0.0813774, 0.019597, 0.0205847, 0.0515639 ]
        self.set_r_and_freq(R_lower_elems, freq)

class cpREV(RateMatrix):
    def __init__(self):
        super().__init__('cpREV')
        R_lower_elems = [ 105,227,357,175,43,4435,669,823,538,10,157,1745,768,400,10,499,152,1055,3691,10,3122,665,243,653,431,303,133,379,66,715,1405,331,441,1269,162,19,145,136,168,10,280,92,148,40,29,197,203,113,10,396,286,82,20,66,1745,236,4482,2430,412,48,3313,2629,263,305,345,218,185,125,61,47,159,202,113,21,10,1772,1351,193,68,53,97,22,726,10,145,25,127,454,1268,72,327,490,87,173,170,285,323,185,28,152,117,219,302,100,43,2440,385,2085,590,2331,396,568,691,303,216,516,868,93,487,1202,1340,314,1393,266,576,241,369,92,32,1040,156,918,645,148,260,2151,14,230,40,18,435,53,63,82,69,42,159,10,86,468,49,73,29,56,323,754,281,1466,391,142,10,1971,89,189,247,215,2370,97,522,71,346,968,92,83,75,592,54,200,91,25,4797,865,249,475,317,122,167,760,10,119 ]
        freq = [ 0.0755, 0.0621, 0.0410, 0.0371, 0.0091, 0.0382, 0.0495, 0.0838, 0.0246, 0.0806, 0.1011, 0.0504, 0.0220, 0.0506, 0.0431, 0.0622, 0.0543, 0.0181, 0.0307, 0.0660 ]
        self.set_r_and_freq(R_lower_elems, freq)

class BLOSUM62(RateMatrix):
    def __init__(self):
        super().__init__('BLOSUM62')
        R_lower_elems = [ 0.735790389698,0.485391055466,1.297446705134,0.543161820899,0.500964408555,3.180100048216,1.45999531047,0.227826574209,0.397358949897,0.240836614802,1.199705704602,3.020833610064,1.839216146992,1.190945703396,0.32980150463,1.1709490428,1.36057419042,1.24048850864,3.761625208368,0.140748891814,5.528919177928,1.95588357496,0.418763308518,1.355872344485,0.798473248968,0.418203192284,0.609846305383,0.423579992176,0.716241444998,1.456141166336,2.414501434208,0.778142664022,0.354058109831,2.43534113114,1.626891056982,0.539859124954,0.605899003687,0.232036445142,0.283017326278,0.418555732462,0.774894022794,0.236202451204,0.186848046932,0.189296292376,0.252718447885,0.800016530518,0.622711669692,0.211888159615,0.218131577594,0.831842640142,0.580737093181,0.372625175087,0.217721159236,0.348072209797,3.890963773304,1.295201266783,5.411115141489,1.593137043457,1.032447924952,0.285078800906,3.945277674515,2.802427151679,0.752042440303,1.022507035889,0.406193586642,0.445570274261,1.253758266664,0.983692987457,0.648441278787,0.222621897958,0.76768882348,2.494896077113,0.55541539747,0.459436173579,0.984311525359,3.364797763104,6.030559379572,1.073061184332,0.492964679748,0.371644693209,0.354861249223,0.281730694207,0.441337471187,0.14435695975,0.291409084165,0.368166464453,0.714533703928,1.517359325954,2.064839703237,0.266924750511,1.77385516883,1.173275900924,0.448133661718,0.494887043702,0.730628272998,0.356008498769,0.858570575674,0.926563934846,0.504086599527,0.527007339151,0.388355409206,0.374555687471,1.047383450722,0.454123625103,0.233597909629,4.325092687057,1.12278310421,2.904101656456,1.582754142065,1.197188415094,1.934870924596,1.769893238937,1.509326253224,1.11702976291,0.35754441246,0.352969184527,1.752165917819,0.918723415746,0.540027644824,1.169129577716,1.729178019485,0.914665954563,1.898173634533,0.934187509431,1.119831358516,1.277480294596,1.071097236007,0.641436011405,0.585407090225,1.17909119726,0.915259857694,1.303875200799,1.488548053722,0.488206118793,1.005451683149,5.15155629227,0.465839367725,0.426382310122,0.191482046247,0.145345046279,0.527664418872,0.758653808642,0.407635648938,0.508358924638,0.30124860078,0.34198578754,0.6914746346,0.332243040634,0.888101098152,2.074324893497,0.252214830027,0.387925622098,0.513128126891,0.718206697586,0.720517441216,0.538222519037,0.261422208965,0.470237733696,0.95898974285,0.596719300346,0.308055737035,4.218953969389,0.674617093228,0.811245856323,0.7179934869,0.951682162246,6.747260430801,0.369405319355,0.796751520761,0.801010243199,4.054419006558,2.187774522005,0.438388343772,0.312858797993,0.258129289418,1.116352478606,0.530785790125,0.524253846338,0.25334079019,0.20155597175,8.311839405458,2.231405688913,0.498138475304,2.575850755315,0.838119610178,0.496908410676,0.561925457442,2.253074051176,0.266508731426,1 ]
        freq = [ 0.074, 0.052, 0.045, 0.054, 0.025, 0.034, 0.054, 0.074, 0.026, 0.068, 0.099, 0.058, 0.025, 0.047, 0.039, 0.057, 0.051, 0.013, 0.032, 0.073 ]
        self.set_r_and_freq(R_lower_elems, freq)

class DCMUT(RateMatrix):
    '''
    Dayhoff-DCMut
    '''
    def __init__(self):
        super().__init__('DCMUT')
        R_lower_elems = [ 0.267828,0.984474,0.327059,1.199805,0.000000,8.931515,0.360016,0.232374,0.000000,0.000000,0.887753,2.439939,1.028509,1.348551,0.000000,1.961167,0.000000,1.493409,11.388659,0.000000,7.086022,2.386111,0.087791,1.385352,1.240981,0.107278,0.281581,0.811907,0.228116,2.383148,5.290024,0.868241,0.282729,6.011613,0.439469,0.106802,0.653416,0.632629,0.768024,0.239248,0.438074,0.180393,0.609526,0.000000,0.076981,0.406431,0.154924,0.341113,0.000000,0.000000,0.730772,0.112880,0.071514,0.443504,2.556685,0.258635,4.610124,3.148371,0.716913,0.000000,1.519078,0.830078,0.267683,0.270475,0.460857,0.180629,0.717840,0.896321,0.000000,0.000000,0.000000,1.127499,0.304803,0.170372,0.000000,3.332732,5.230115,2.411739,0.183641,0.136906,0.138503,0.000000,0.000000,0.000000,0.000000,0.153478,0.475927,1.951951,1.565160,0.000000,0.921860,2.485920,1.028313,0.419244,0.133940,0.187550,1.526188,0.507003,0.347153,0.933709,0.119152,0.316258,0.335419,0.170205,0.110506,4.051870,1.531590,4.885892,0.956097,1.598356,0.561828,0.793999,2.322243,0.353643,0.247955,0.171432,0.954557,0.619951,0.459901,2.427202,3.680365,0.265745,2.271697,0.660930,0.162366,0.525651,0.340156,0.306662,0.226333,1.900739,0.331090,1.350599,1.031534,0.136655,0.782857,5.436674,0.000000,2.001375,0.224968,0.000000,0.000000,0.000000,0.000000,0.000000,0.270564,0.000000,0.461776,0.000000,0.000000,0.762354,0.000000,0.740819,0.000000,0.244139,0.078012,0.946940,0.000000,0.953164,0.000000,0.214717,0.000000,1.265400,0.374834,0.286572,0.132142,0.000000,6.952629,0.000000,0.336289,0.417839,0.608070,2.059564,0.240368,0.158067,0.178316,0.484678,0.346983,0.367250,0.538165,0.438715,8.810038,1.745156,0.103850,2.565955,0.123606,0.485026,0.303836,1.561997,0.000000,0.279379 ]
        freq = [ 0.087127, 0.040904, 0.040432, 0.046872, 0.033474, 0.038255, 0.049530, 0.088612, 0.033619, 0.036886, 0.085357, 0.080481, 0.014753, 0.039772, 0.050680, 0.069577, 0.058542, 0.010494, 0.029916, 0.064718 ]
        self.set_r_and_freq(R_lower_elems, freq)

class Dayhoff(RateMatrix):
    '''
    The classic
    Dayhoff model
    '''
    def __init__(self):
        super().__init__('Dayhoff')
        R_lower_elems = [ 27.00,98.00,32.00,120.00,0.00,905.00,36.00,23.00,0.00,0.00,89.00,246.00,103.00,134.00,0.00,198.00,1.00,148.00,1153.00,0.00,716.00,240.00,9.00,139.00,125.00,11.00,28.00,81.00,23.00,240.00,535.00,86.00,28.00,606.00,43.00,10.00,65.00,64.00,77.00,24.00,44.00,18.00,61.00,0.00,7.00,41.00,15.00,34.00,0.00,0.00,73.00,11.00,7.00,44.00,257.00,26.00,464.00,318.00,71.00,0.00,153.00,83.00,27.00,26.00,46.00,18.00,72.00,90.00,1.00,0.00,0.00,114.00,30.00,17.00,0.00,336.00,527.00,243.00,18.00,14.00,14.00,0.00,0.00,0.00,0.00,15.00,48.00,196.00,157.00,0.00,92.00,250.00,103.00,42.00,13.00,19.00,153.00,51.00,34.00,94.00,12.00,32.00,33.00,17.00,11.00,409.00,154.00,495.00,95.00,161.00,56.00,79.00,234.00,35.00,24.00,17.00,96.00,62.00,46.00,245.00,371.00,26.00,229.00,66.00,16.00,53.00,34.00,30.00,22.00,192.00,33.00,136.00,104.00,13.00,78.00,550.00,0.00,201.00,23.00,0.00,0.00,0.00,0.00,0.00,27.00,0.00,46.00,0.00,0.00,76.00,0.00,75.00,0.00,24.00,8.00,95.00,0.00,96.00,0.00,22.00,0.00,127.00,37.00,28.00,13.00,0.00,698.00,0.00,34.00,42.00,61.00,208.00,24.00,15.00,18.00,49.00,35.00,37.00,54.00,44.00,889.00,175.00,10.00,258.00,12.00,48.00,30.00,157.00,0.00,28.00 ]
        freq = [ 0.087127, 0.040904, 0.040432, 0.046872, 0.033474, 0.038255, 0.049530, 0.088612, 0.033618, 0.036886, 0.085357, 0.080482, 0.014753, 0.039772, 0.050680, 0.069577, 0.058542, 0.010494, 0.029916, 0.064718 ]
        self.set_r_and_freq(R_lower_elems, freq)

class MtREV(RateMatrix):        # Used to be MtRev24, but modeltestng calls it mtrev.
    def __init__(self):
        super().__init__('MtREV')
        R_lower_elems = [ 23.18,26.95,13.24,17.67,1.90,794.38,59.93,103.33,58.94,1.90,1.90,220.99,173.56,55.28,75.24,9.77,1.90,63.05,583.55,1.90,313.56,120.71,23.03,53.30,56.77,30.71,6.75,28.28,13.90,165.23,496.13,113.99,141.49,582.40,49.12,1.90,96.49,1.90,27.10,4.34,62.73,8.34,3.31,5.98,12.26,25.46,15.58,15.16,1.90,25.65,39.70,1.90,2.41,11.49,329.09,8.36,141.40,608.70,2.31,1.90,465.58,313.86,22.73,127.67,19.57,14.88,141.88,1.90,65.41,1.90,6.18,47.37,1.90,1.90,11.97,517.98,537.53,91.37,6.37,4.69,15.20,4.98,70.80,19.11,2.67,1.90,48.16,84.67,216.06,6.44,90.82,54.31,23.64,73.31,13.43,31.26,137.29,12.83,1.90,60.97,20.63,40.10,50.10,18.84,17.31,387.86,6.04,494.39,69.02,277.05,54.11,54.71,125.93,77.46,47.70,73.61,105.79,111.16,64.29,169.90,480.72,2.08,238.46,28.01,179.97,94.93,14.82,11.17,44.78,368.43,126.40,136.33,528.17,33.85,128.22,597.21,1.90,21.95,10.68,19.86,33.60,1.90,1.90,10.92,7.08,1.90,32.44,24.00,21.71,7.84,4.21,38.58,9.99,6.48,1.90,191.36,21.21,254.77,38.82,13.12,3.21,670.14,25.01,44.15,51.17,39.96,465.58,16.21,64.92,38.73,26.25,195.06,7.64,1.90,1.90,1.90,19.00,21.14,2.53,1.90,1222.94,91.67,1.90,387.54,6.35,8.23,1.90,204.54,5.37,1.90 ]
        freq = [ 0.072, 0.019, 0.039, 0.019, 0.006, 0.025, 0.024, 0.056, 0.028, 0.088, 0.169, 0.023, 0.054, 0.061, 0.054, 0.072, 0.086, 0.029, 0.033, 0.043 ]
        self.set_r_and_freq(R_lower_elems, freq)

class MtMAM(RateMatrix):
    def __init__(self):
        super().__init__('MtMAM')
        R_lower_elems = [ 32,2,4,11,0,864,0,186,0,0,0,246,8,49,0,0,0,0,569,0,274,78,18,47,79,0,0,22,8,232,458,11,305,550,22,0,75,0,19,0,41,0,0,0,0,21,6,0,0,27,20,0,0,26,232,0,50,408,0,0,242,215,0,0,6,4,76,0,21,0,0,22,0,0,0,378,609,59,0,0,6,5,7,0,0,0,0,57,246,0,11,53,9,33,2,0,51,0,0,53,5,43,18,0,17,342,3,446,16,347,30,21,112,20,0,74,65,47,90,202,681,0,110,0,114,0,4,0,1,360,34,50,691,8,78,614,5,16,6,0,65,0,0,0,0,0,12,0,13,0,7,17,0,0,0,156,0,530,54,0,1,1525,16,25,67,0,682,8,107,0,14,398,0,0,10,0,33,20,5,0,2220,100,0,832,6,0,0,237,0,0 ]
        freq = [ 0.0692, 0.0184, 0.0400, 0.0186, 0.0065, 0.0238, 0.0236, 0.0557, 0.0277, 0.0905, 0.1675, 0.0221, 0.0561, 0.0611, 0.0536, 0.0725, 0.0870, 0.0293, 0.0340, 0.0428 ]
        self.set_r_and_freq(R_lower_elems, freq)

class MtZoa(RateMatrix):
    def __init__(self):
        super().__init__('MtZoa')
        R_lower_elems = [ 3.3,1.7,33.6,16.1,3.2,617.0,272.5,61.1,94.6,9.5,7.3,231.0,190.3,19.3,49.1,17.1,6.4,174.0,883.6,3.4,349.4,289.3,7.2,99.3,26.0,82.4,8.9,43.1,2.3,61.7,228.9,55.6,37.5,421.8,14.9,7.4,33.2,0.2,24.3,1.5,48.8,0.2,7.3,3.4,1.6,15.6,4.1,7.9,0.5,59.7,23.0,1.0,3.5,6.6,425.2,0.2,292.3,413.4,0.2,0.2,334.0,163.2,10.1,23.9,8.4,6.7,136.5,3.8,73.7,0.2,264.8,83.9,0.2,52.2,7.1,449.7,636.3,83.0,26.5,0.2,12.9,2.0,167.8,9.5,0.2,5.8,13.1,90.3,234.2,16.3,215.6,61.8,7.5,22.6,0.2,8.1,52.2,20.6,1.3,15.6,2.6,11.4,24.3,5.4,10.5,644.9,11.8,420.2,51.4,656.3,96.4,38.4,257.1,23.1,7.2,15.2,144.9,95.3,32.2,79.7,378.1,3.2,184.6,2.3,199.0,39.4,34.5,5.2,19.4,222.3,50.0,75.5,305.1,19.3,56.9,666.3,3.1,16.9,6.4,0.2,36.1,6.1,3.5,12.3,4.5,9.7,27.2,6.6,48.7,58.2,1.3,10.3,3.6,2.1,13.8,141.6,13.9,76.7,52.3,10.0,4.3,266.5,13.1,5.7,45.0,41.4,590.5,4.2,29.7,29.0,79.8,321.9,5.1,7.1,3.7,243.8,9.0,16.3,23.7,0.3,1710.6,126.1,11.1,279.6,59.6,17.9,49.5,396.4,13.7,15.6 ]
        freq = [ 0.068880, 0.021037, 0.030390, 0.020696, 0.009966, 0.018623, 0.024989, 0.071968, 0.026814, 0.085072, 0.156717, 0.019276, 0.050652, 0.081712, 0.044803, 0.080535, 0.056386, 0.027998, 0.037404, 0.066083 ]
        self.set_r_and_freq(R_lower_elems, freq)

class FLU(RateMatrix):
    def __init__(self):
        super().__init__('FLU')
        R_lower_elems = [ 0.138658764751059,0.0533665787145181,0.161000889039552,0.584852305649886,0.00677184253227681,7.73739287051356,0.0264470951166826,0.16720700818221,1.30249856764315e-005,0.014132062548787,0.353753981649393,3.29271694159791,0.530642655337477,0.145469388422239,0.00254733397966779,1.4842345032161,0.124897616909194,0.0616521921873234,5.37051127867923,3.91106992668137e-011,1.19562912226203,1.13231312248046,1.19062446519178,0.322524647863997,1.93483278448943,0.116941459124876,0.108051341246072,1.59309882471598,0.214757862168721,1.87956993845887,1.38709603234116,0.887570549414031,0.0218446166959521,5.33031341222104,0.256491863423002,0.0587745274250666,0.149926734229061,0.246117171830255,0.21857197541607,0.0140859174993809,0.00111215807314139,0.0288399502994541,0.0142107118685268,1.62662283098296e-005,0.243190142026506,0.0231169515264061,0.296045557460629,0.000835873174542931,0.00573068208525287,0.00561362724916376,1.02036695531654,0.016499535540562,0.00651622937676521,0.321611693603646,3.51207228207807,0.474333610192982,15.3000966197798,2.6468479652886,0.290042980143818,3.83228119049152e-006,2.559587177122,3.88148880863814,0.264148929349066,0.347302791211758,0.227707997165566,0.129223639195248,0.0587454231508643,0.890162345593224,0.00525168778853117,0.0417629637305017,0.111457310321926,0.190259181297527,0.313974351356074,0.00150046692269255,0.00127350890508147,9.01795420287895,6.74693648486614,1.33129161941264,0.0804909094320368,0.0160550314767596,0.000836445615590923,1.0600102849456e-006,0.10405366623526,0.0326806570137471,0.00100350082518749,0.00123664495412902,0.119028506158521,1.46335727834648,2.98680003596399,0.319895904499071,0.279910508981581,0.659311477863896,0.154027179890711,0.0364417719063219,0.188539456415654,1.59312060172652e-013,0.712769599068934,0.319558828428154,0.0386317614553493,0.924466914225534,0.0805433268150369,0.634308520867322,0.195750631825315,0.0568693216513547,0.0071324304661639,3.01134451903854,0.950138410087378,3.88131053061457,0.338372183381345,0.336263344504404,0.487822498528951,0.307140298031341,1.58564657669139,0.580704249811294,0.290381075260226,0.570766693213698,0.283807671568883,0.00702658828739369,0.996685669575839,2.08738534433198,5.4182981753166,0.183076905018197,2.14033231636063,0.135481232622983,0.011975265782196,0.60234096342392,0.2801248951174,0.0188080299490973,0.368713573381758,2.90405228596936,0.0449263566753846,1.52696419998775,2.03151132062208,0.000134906239484254,0.54225109402693,2.2068599339404,0.195966354027106,1.36942940801512,0.000536284040016542,1.4893873721753e-005,0.0941066800969967,0.0440205200833047,0.155245492137294,0.196486447133033,0.0223729191088972,0.0321321499585514,0.431277662888057,4.97641445484395e-005,0.0704600385245663,0.814753093809928,0.000431020702277328,0.0998357527014247,0.207066205546908,0.0182892882245349,0.0998554972524385,0.373101926513925,0.525398542949365,0.601692431136271,0.0722059354079545,0.104092870343653,0.0748149970972622,6.44895444648517,0.273934263183281,0.340058468374384,0.0124162215506117,0.874272174533394,5.39392424532822,0.000182294881489116,0.392552239890831,0.124898020409882,0.42775543040588,3.53200526987468,0.103964386383736,0.0102575172450253,0.297123975243582,0.0549045639492389,0.406697814049488,0.285047948309311,0.337229618868315,0.0986313546653266,14.3940521944257,0.890598579382591,0.0731279296372675,4.90484223478739,0.592587985458668,0.0589719751511691,0.0882564232979724,0.654109108255219,0.256900461407996,0.167581646770807 ]
        freq = [ 0.0470718, 0.0509102, 0.0742143, 0.0478596, 0.0250216, 0.0333036, 0.0545874, 0.0763734, 0.0199642, 0.0671336, 0.0714981, 0.0567845, 0.0181507, 0.0304961, 0.0506561, 0.0884091, 0.0743386, 0.0185237, 0.0314741, 0.0632292 ]
        self.set_r_and_freq(R_lower_elems, freq)

class RtREV(RateMatrix):
    def __init__(self):
        super().__init__('RtREV')
        R_lower_elems = [ 34,51,35,10,30,384,439,92,128,1,32,221,236,78,70,81,10,79,542,1,372,135,41,94,61,48,18,70,30,90,320,91,124,387,34,68,1,24,35,1,104,33,1,1,34,45,18,15,5,110,54,21,3,51,385,38,593,123,20,16,309,141,30,76,34,23,235,57,1,1,156,158,1,37,116,375,581,134,1,7,49,1,70,1,1,7,141,64,179,14,247,97,24,33,55,1,68,52,17,44,10,22,43,1,11,460,102,294,136,75,225,95,152,183,4,24,77,1,20,134,258,64,148,55,117,146,82,7,49,72,25,110,131,69,62,671,5,13,16,1,55,10,17,23,48,39,47,6,111,182,9,14,1,55,47,28,1,131,45,1,21,307,26,64,1,74,1017,14,31,34,176,197,29,21,6,295,36,35,3,1,1048,112,19,236,92,25,39,196,26,59 ]
        freq = [ 0.0646, 0.0453, 0.0376, 0.0422, 0.0114, 0.0606, 0.0607, 0.0639, 0.0273, 0.0679, 0.1018, 0.0751, 0.015, 0.0287, 0.0681, 0.0488, 0.0622, 0.0251, 0.0318, 0.0619 ]
        self.set_r_and_freq(R_lower_elems, freq)

def mpp(M):
    '''
    MatrixPrettyPrint: Convert Q to a nicely printable string.
    '''
    assert isinstance(M, np.ndarray)
    s = '[\n'
    for row in range(20):
        s += ' ['
        for col in range(20):
            val = M.item((row, col))
            s+=f' {val:7.3}'
        s += ']\n'
    s += ']'
    print(s)




if __name__ == '__main__':
    # For convenience, set some print options for numpy
    np.set_printoptions(precision=3)
    np.set_printoptions(suppress=True)
    np.set_printoptions(linewidth=200)
